@using PalmHill.BlazorChat.ApiClient
@using PalmHill.BlazorChat.Shared.Models
@inject BlazorChatApi BlazorChatApi

@if (Attachment != null)
{




    <FluentPresenceBadge Style="width:100%;" Status="presenceStatus" StatusTitle="presenceLabel">
        <FluentCard Style="width:100%; padding:3px 3px" >
            <div>
                @Attachment.Name
            </div>
            <FluentButton IconStart="@(new Icons.Regular.Size16.Delete())"
                          Loading="@loading"
                          OnClick="@DeleteAttachment">
            </FluentButton>
            
        </FluentCard>
        
    </FluentPresenceBadge>


}


@code {
    [Parameter]
    public AttachmentInfo? Attachment { get; set; }

    [Parameter]
    public EventCallback<AttachmentInfo> OnFileDeleted { get; set; }

    bool loading = false;

    async Task DeleteAttachment()
    {
        if(Attachment == null)
        { 
            return; 
        }

        try
        {
            await BlazorChatApi.Attachment.DeleteAttachment(Attachment.Id);
            await OnFileDeleted.InvokeAsync(Attachment);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to delete attachment. {ex}");
        }
    }

    public PresenceStatus presenceStatus
    {
        get
        {
            if (Attachment == null)
            {
                return PresenceStatus.Busy;

            }

            var presenceStatus = Attachment.Status switch
            {
                AttachmentStatus.Pending => PresenceStatus.Away,
                AttachmentStatus.Uploaded => PresenceStatus.Available,
                AttachmentStatus.Failed => PresenceStatus.Busy,
                _ => PresenceStatus.Busy
            };

            return presenceStatus;
        }
    }

    public string presenceLabel
    {
        get
        {
            if (Attachment == null)
            {
                return "";

            }

            var presenceStatus = Attachment.Status switch
            {
                AttachmentStatus.Pending => "Pending",
                AttachmentStatus.Uploaded => "Ready",
                AttachmentStatus.Failed => "Failed",
                _ => "Failed"
            };

            return presenceLabel;
        }
    }

}
