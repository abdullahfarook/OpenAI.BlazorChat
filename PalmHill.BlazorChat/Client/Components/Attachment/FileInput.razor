@using Microsoft.AspNetCore.Components.Forms    
@using PalmHill.BlazorChat.ApiClient            
@using PalmHill.BlazorChat.Shared.Models        
@using Refit                                    
@inject BlazorChatApi BlazorChatApi             

<style>
    .file-upload-container {
        border: 2px dashed var(--neutral-stroke-rest);
        border-radius: 5px;
        padding: 20px;
        text-align: center;
        cursor: pointer;
        position: relative;
    }
</style>

<FluentInputFile 
                 AnchorId="MyUploadBuffer"
                 DragDropZoneVisible="true"
                 Mode="InputFileMode.Stream"
                 Multiple="true"
                 MaximumFileSize="100000"
                 OnInputFileChange="UploadFiles"
                 Class="file-upload-container">
                 
    <div>
        <h5>Drag and Drop Files</h5>
        <br />
        <FluentButton Appearance="Appearance.Accent" Id="MyUploadBuffer">
            Select Files
        </FluentButton>
    </div>
</FluentInputFile>

@if (Controller!.UploadedFiles.Any())
{
    <div>
        @foreach (var file in Controller.UploadedFiles)
        {
            <AttachmentItemDisplay OnFileDeleted="FileDeletedHandler" Attachment="file"></AttachmentItemDisplay>
        }
    </div>
}



@code
{
    [Parameter]
    public ChatService? Controller { get; set; }


    [Parameter]
    public EventCallback<AttachmentInfo> OnFileDeleted { get; set; }



    int? progressPercent;
    private void FileDeletedHandler(AttachmentInfo deletedAttachment)
    {
        Controller!.UploadedFiles.Remove(deletedAttachment);
    }


    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
      
        progressPercent = 10;
        var files = e.GetMultipleFiles();
        var uploadedCount = 0;
        var uploadTasks = new List<Task>();

        foreach (var file in files)
        {
            var attachmentInfo = new AttachmentInfo();
            attachmentInfo.ConversationId = Controller?.WebSocketChatConnection.ConversationId;
            attachmentInfo.Name = file.Name;
            attachmentInfo.Size = file.Size;
            attachmentInfo.ContentType = file.ContentType;
            attachmentInfo.Status = AttachmentStatus.Pending;

            Controller!.UploadedFiles.Add(attachmentInfo);

            var uploadTask = new Task(async () =>
            {
                if (attachmentInfo?.ConversationId is null)
                {
                    attachmentInfo!.Status = AttachmentStatus.Failed;
                    StateHasChanged();
                    return;
                }

                var stream = file.OpenReadStream(10000000);
                var streamPart = new StreamPart(stream, file.Name, file.ContentType);
                var apiResponse = await BlazorChatApi.Attachment.AddAttachment(attachmentInfo.ConversationId.Value, attachmentInfo.Id, streamPart);
                uploadedCount++;
                progressPercent = (int)((uploadedCount / (double)files.Count()) * 100);

                if (!apiResponse.IsSuccessStatusCode)
                {
                    attachmentInfo.Status = AttachmentStatus.Failed;
                    StateHasChanged();
                }
            });

            uploadTasks.Add(uploadTask);
        }

        foreach (var uploadTask in uploadTasks)
        {
            uploadTask.Start();
            await uploadTask;
        }
    }

    public void UploadStatusChanged(Guid attachmentId, AttachmentStatus newStatus)
    {
        var currentAttachment = Controller?.UploadedFiles.SingleOrDefault(a => a.Id == attachmentId);
        currentAttachment!.Status = newStatus;
        StateHasChanged();
    }

}