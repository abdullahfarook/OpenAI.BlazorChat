@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using Markdig
@using PalmHill.BlazorChat.Shared.Models

@inherits FluentComponentBase

<div class="chat-messages">
    @foreach (var mr in modelResponses)
    {
        <FluentCard>
            <FluentStack>
                <div>
                    <FluentIcon Value="@(new Icons.Regular.Size24.PersonChat())" />
                </div>

                <div>
                    <span>@mr.Prompt</span>
                </div>
            </FluentStack>

        </FluentCard>

        <FluentCard>
            <FluentStack>
                <div style="position:relative;">
                    <FluentIcon Value="@(new Icons.Regular.Size24.LightbulbPerson())" />

                    <FluentProgressRing 
                        Visible="!mr.IsComplete" 
                        Style="height:24px; width:24px; position:absolute; top:0px; left:0px;"
                    ></FluentProgressRing>
                </div>

                <div>
                    <ModelMarkdown ModelResponse="@mr"></ModelMarkdown>
                </div>
            </FluentStack>

        </FluentCard>
    }

    <div style="height:125px"></div>
</div>



@code
{


    private HubConnection? hubConnection;
    private List<ModelResponse> modelResponses = new List<ModelResponse>();
    public Guid ConversationId { get; set; } = Guid.NewGuid();

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub?customUserId=user1"))
            .Build();

        hubConnection.On<Guid, string>("ReceiveModelString", (messageId, message) =>
        {
            var currentModelResponse = modelResponses.Single(mr => mr.PromptId == messageId);
            currentModelResponse.AddResponseString(message);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Guid, string>("MessageComplete", (messageId, status) =>
        {
            var currentModelResponse = modelResponses.Single(mr => mr.PromptId == messageId);
            currentModelResponse.CompleteResponse();

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public async Task Send(string message, UISettings inferenceSettings)
    {
        if (string.IsNullOrWhiteSpace(message))
        {
            return;
        }

        if (hubConnection is not null)
        {
            var newMessage = new ModelResponse() { Prompt = message };
            modelResponses.Add(newMessage);
            StateHasChanged();

            var chatConversation = GetChatConversation(modelResponses);
            chatConversation.Settings = inferenceSettings;
            chatConversation.SystemMessage = inferenceSettings.SystemMessage;
            await hubConnection.SendAsync("SendPrompt", newMessage.PromptId, chatConversation);
        }
    }

    public ChatConversation GetChatConversation(List<ModelResponse> modelResponses)
    {
        var chatConversation = new ChatConversation();

        foreach (var mr in modelResponses)
        {
            var userMessage = new ChatMessage();
            userMessage.Message = mr.Prompt;
            userMessage.Role = ChatMessageRole.User;
            chatConversation.ChatMessages.Add(userMessage);

            if (mr.IsComplete)
            {
                var modelMessage = new ChatMessage();
                modelMessage.Message = mr.Resonse;
                modelMessage.Role = ChatMessageRole.Assistant;
                chatConversation.ChatMessages.Add(modelMessage);

            }

        }

        return chatConversation;
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }


}
