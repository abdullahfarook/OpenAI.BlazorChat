@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using Markdig
@using PalmHill.BlazorChat.Shared.Models
@inject ApiClient.BlazorChatApi BlazorChatApi;

@inherits FluentComponentBase

<div class="chat-messages">
    @foreach (var mr in modelResponses)
    {
        <FluentCard>
            <FluentStack>
                <div>
                    <FluentIcon Value="@(new Icons.Regular.Size24.PersonChat())" />
                </div>

                <div>
                    <span>@mr.Prompt</span>
                </div>
            </FluentStack>

        </FluentCard>

        <FluentCard>
            <FluentStack>
                <div style="position:relative;">
                    <FluentIcon Value="@(new Icons.Regular.Size24.LightbulbPerson())" />

                    <FluentProgressRing Visible="!mr.IsComplete"
                                        Style="height:24px; width:24px; position:absolute; top:0px; left:0px;"></FluentProgressRing>
                </div>

                <div>
                    <ModelMarkdown ModelResponse="@mr"></ModelMarkdown>
                </div>
            </FluentStack>

        </FluentCard>
    }

    <div style="height:125px"></div>
</div>



@code
{

    [Parameter]
    public ChatComponents? UiComponents { get; set; }


    public HubConnection? hubConnection;
    private List<ModelResponse> modelResponses = new List<ModelResponse>();
    public Guid ConversationId { get; set; } = Guid.NewGuid();

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub?customUserId=user1"))
            .Build();

        hubConnection.On<Guid, string>("ReceiveModelString", (messageId, message) =>
        {
            var currentModelResponse = modelResponses.Single(mr => mr.PromptId == messageId);
            currentModelResponse.AddResponseString(message);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Guid, bool>("MessageComplete", (messageId, success) =>
        {
            var currentModelResponse = modelResponses.Single(mr => mr.PromptId == messageId);
            currentModelResponse.CompleteResponse(success);

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<bool>("ChatComplete", (isComplete) =>
        {
            UiComponents!.ChatInput!.SetReady();
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<AttachmentInfo>("AttachmentStatusUpdate", (attachmentInfo) =>
        {
            UiComponents?.AttachmentManager?.FileInput?.UploadStatusChanged(attachmentInfo.Id, attachmentInfo.Status);
        });


        await hubConnection.StartAsync();
    }

    public async Task Send(string message, UISettings inferenceSettings)
    {
        if (string.IsNullOrWhiteSpace(message))
        {
            return;
        }

        if (hubConnection is not null)
        {
            var newMessage = new ModelResponse() { Prompt = message };
            modelResponses.Add(newMessage);
            StateHasChanged();

            if (UiComponents?.ChatInput?.IsAttachmentMode ?? false)
            {
                var chatConversation = new ChatConversation();
                chatConversation.Id = ConversationId.ToString();

                var chatMessage = new ChatMessage();
                chatMessage.Message = message;
                chatMessage.Role = ChatMessageRole.Question;

                chatConversation.ChatMessages.Add(chatMessage);

                var apiResponse = await BlazorChatApi.Chat.Ask(chatConversation);

                if (!apiResponse.IsSuccessStatusCode)
                {
                    return;
                }

                var answer = apiResponse?.Content.Message;
                modelResponses.Last().AddResponseString(message);

            }
            else
            {
                //Do chat stuff.
                var chatConversation = GetChatConversation(modelResponses);
                chatConversation.Id = ConversationId.ToString();
                chatConversation.Settings = inferenceSettings;
                chatConversation.SystemMessage = inferenceSettings.SystemMessage;
                await hubConnection.SendAsync("SendPrompt", newMessage.PromptId, chatConversation);

            }


        }
    }

    public ChatConversation GetChatConversation(List<ModelResponse> modelResponses)
    {
        var chatConversation = new ChatConversation();

        foreach (var mr in modelResponses)
        {
            var userMessage = new ChatMessage();
            userMessage.Message = mr.Prompt;
            userMessage.Role = ChatMessageRole.User;
            chatConversation.ChatMessages.Add(userMessage);

            if (mr.IsComplete)
            {
                var modelMessage = new ChatMessage();
                modelMessage.Message = mr.Resonse;
                modelMessage.Role = ChatMessageRole.Assistant;
                chatConversation.ChatMessages.Add(modelMessage);

            }

        }

        return chatConversation;
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }


}
