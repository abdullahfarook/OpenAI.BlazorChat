@using Microsoft.AspNetCore.Components.Forms
@using System.Collections.Concurrent
@inject IJSRuntime JSRuntime

<style>
    .counterbadge-container
    {
        display:block !important;
    }

</style>

<FluentFooter Class="w-100" Style="position:fixed; bottom:15px;">
    <FluentStack Class="chat-messages input-area">
        <div class="file-input-area" @onclick="ShowAttachmentPanel">
            

            <FluentCounterBadge 
                Count="Controller?.UploadedFiles.Count ?? 0" 
                ShowZero="true" 
                BottomPosition="-10" 
                
            >
                <FluentButton 
                    Id="uploadButton" 
                    IconStart="(new Icons.Regular.Size24.Attach())" 
                    Style="margin-top:6px;"
                ></FluentButton>
            </FluentCounterBadge>
        </div>
        <div style="flex-grow:1;" class="min-h-100">
            <textarea 
                placeholder="Shift+Enter for new line" 
                rows="1" 
                @ref="textAreaElement" 
                @bind="Controller!.UserInput" 
                class="main-textarea" 
                @onkeyup="HandleKeyPress" 
                @bind:event="oninput"
            ></textarea>
        </div>
        <div>
            @if (Controller?.CanSend == true)
            {
                <FluentButton OnClick="Send"
                              Disabled="string.IsNullOrWhiteSpace(Controller!.UserInput)"
                              Appearance="Appearance.Accent"
                              IconStart="(new Icons.Regular.Size24.Send())"
                              Style="margin-top:6px;"></FluentButton>

            }

            @if (Controller?.CanStop == true)
            {
                <FluentButton OnClick="CancelTextGeneration"
                              Appearance="Appearance.Accent"
                              IconStart="(new Icons.Regular.Size24.Stop())"
                              Style="margin-top:6px;"></FluentButton>
            
            }

        </div>
    </FluentStack>
</FluentFooter>


@code {
    [Parameter]
    public ChatService? Controller { get; set; }


    private ElementReference textAreaElement;




    private async Task Send()
    {
        await Controller!.SendPrompt();
        await SizeTextArea();
        StateHasChanged();

    }

    public async Task CancelTextGeneration()
    {
        await Controller!.CancelTextGeneration();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await Send();
        }
    }

    private async Task SizeTextArea()
    {
        await JSRuntime.InvokeVoidAsync("textAreaAdjust", textAreaElement);
    }



    private void ShowAttachmentPanel()
    {
        Controller!.ShowAttachments();
    }


}
