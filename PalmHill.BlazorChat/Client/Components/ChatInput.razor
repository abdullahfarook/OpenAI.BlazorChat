@using Microsoft.AspNetCore.Components.Forms
@using PalmHill.BlazorChat.ApiClient
@using PalmHill.BlazorChat.Shared.Models
@using Refit
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject ThemeControl ThemeControl
@inject BlazorChatApi BlazorChatApi

<FluentFooter Class="w-100" Style="position:fixed; bottom:15px;">
    <FluentStack Class="chat-messages input-area">
        <div>

            @*Not wrapping this in an if block. Use css to hide. FluentInputFile won't work if the element disappears from the DOM. *@
            <FluentButton 
                Id="uploadButton" 
                Class="@((progressPercent == 0 || progressPercent == 100) ? string.Empty : "hidden")" 
                IconStart="(new Icons.Regular.Size24.Attach())" 
                Style="margin-top:6px;"
            ></FluentButton>

            @if (progressPercent > 0 && progressPercent < 100)
            {
                <FluentProgressRing 
                    @bind-Value="@progressPercent" 
                    Label="@progressTitle" 
                    Style="height:32px; margin-top:6px" 
                />

            }

        </div>
        <div style="flex-grow:1;" class="min-h-100">
            <textarea 
                placeholder="Shift+Enter for new line" 
                rows="1" 
                @ref="textAreaElement" 
                @bind="messageInput" 
                class="main-textarea" 
                @onkeyup="HandleKeyPress" 
                @bind:event="oninput"
            ></textarea>
        </div>
        <div>
            <FluentButton @ref="sendButton" OnClick="Send" Appearance="Appearance.Accent" IconStart="(new Icons.Regular.Size24.Send())" Style="margin-top:6px;"></FluentButton>
        </div>
    </FluentStack>
</FluentFooter>

<FluentInputFile DragDropZoneVisible="false"
                 Mode="InputFileMode.Stream"
                 Multiple="true"
                 AnchorId="uploadButton"
                 MaximumFileSize="@(100 * 1024 * 1024)"
                 OnInputFileChange="UploadFiles" />

@code {
    private ElementReference textAreaElement;
    private string messageInput = string.Empty;
    private FluentButton? sendButton;
    private int progressPercent = 0;
    private string progressTitle = string.Empty;

    private Chat? _chatRenderer;
    public Chat? ChatRenderer { get { return _chatRenderer; } }
    public UISettings UISettings { get; set; } = new UISettings();

    public void AttachToChat(Chat chat)
    {
        _chatRenderer = chat;
    }

    public async Task ShowSettings()
    {
 
        DialogParameters<UISettings> parameters = new()
            {

                Title = $"Settings",
                PrimaryAction = "Save",
                PrimaryActionEnabled = true,
                Width = "500px",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true,
            };
        var currentSettingsCopy = new UISettings
            {
                FrequencyPenalty = UISettings.FrequencyPenalty,
                MaxLength = UISettings.MaxLength,
                PresencePenalty = UISettings.PresencePenalty,
                Temperature = UISettings.Temperature,
                TopP = UISettings.TopP,
                SystemMessage = UISettings.SystemMessage,
                DarkMode = UISettings.DarkMode
            };
        var dialog = await DialogService.ShowDialogAsync<ChatSettings>(currentSettingsCopy, parameters);
        var dialogResult = await dialog.Result;

        if (dialogResult?.Cancelled == true)
        {
            //Reset the theme if cancel.
            await ThemeControl.ChangeTheme(UISettings.DarkMode);
        }
        else
        {
            //Save the settings.
            UISettings = (UISettings?)dialogResult?.Data ?? new UISettings();
        }

    }

    private async Task Send()
    {
        if (ChatRenderer == null)
        {
            return;
        }

        await ChatRenderer.Send(messageInput, UISettings);
        messageInput = string.Empty;
        StateHasChanged();
        await SizeTextArea();

    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (ChatRenderer == null)
        {
            return;
        }

        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await Send();
        }

        await SizeTextArea();
    }

    private async Task SizeTextArea()
    {
        await JSRuntime.InvokeVoidAsync("textAreaAdjust", textAreaElement);
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        if (ChatRenderer == null)
        {
            return;
        }
        progressPercent = 10;
        var files = e.GetMultipleFiles();
        var uploadedCount = 0;
        foreach (var file in files)
        {
            var stream = file.OpenReadStream();
            var streamPart = new StreamPart(stream, file.Name, file.ContentType);
            var attachmentInfo = await BlazorChatApi.Attachment.AddAttachment(ChatRenderer.ConversationId.ToString(), streamPart);
            uploadedCount++;
            progressPercent = (int)((uploadedCount / (double)files.Count()) * 100);
        }
    }
}
