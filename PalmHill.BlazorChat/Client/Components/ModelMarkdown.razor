<MarkdownSection @ref="mdSection" Content="@markdownToRender"></MarkdownSection>

@code {

    private string markdownToRender { get; set; } = string.Empty;

    [Parameter]
    public ModelResponse? ModelResponse { get; set; }

    private MarkdownSection? mdSection { get; set; }

    private void HandleResponseChanged(object? sender, EventArgs? e)
    {
        // Update the markdownToRender variable based on the new response
        markdownToRender = ModelResponse?.Resonse ?? string.Empty;
        mdSection?.RefreshContent();
        // Invoke a StateHasChanged to refresh the UI if needed
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        // Unsubscribe from the old ModelResponse's event to avoid memory leaks
        if (ModelResponse != null)
        {
            ModelResponse.ResponseChanged -= HandleResponseChanged;
            ModelResponse.ResponseCompleted -= HandleResponseChanged;
        }

        // Assign the new ModelResponse object
        base.OnParametersSet();

        // Subscribe to the new ModelResponse's event
        if (ModelResponse != null)
        {
            ModelResponse.ResponseChanged += HandleResponseChanged;
            ModelResponse.ResponseCompleted += HandleResponseChanged;

            // Update the UI with the current state of the response
            markdownToRender = ModelResponse.Resonse;
        }
    }

    // Ensure to unsubscribe when the component is disposed to avoid memory leaks
    public void Dispose()
    {
        if (ModelResponse != null)
        {
            ModelResponse.ResponseChanged -= HandleResponseChanged;
            ModelResponse.ResponseCompleted -= HandleResponseChanged;
        }
    }
}

