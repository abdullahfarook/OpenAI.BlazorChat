@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using Markdig
@using PalmHill.BlazorChat.Shared.Models
@inherits FluentComponentBase



<div>
    <div>
        <h3>Messages</h3>

        <div>
            @foreach (var mr in modelResponses)
            {
                <FluentCard>
                    <FluentStack>
                        <div>
                            <FluentIcon Value="@(new Icons.Regular.Size24.PersonChat())" />
                        </div>

                        <div>
                            <span>@mr.Prompt</span>
                        </div>
                    </FluentStack>

                </FluentCard>

                <FluentCard>
                    <FluentStack>
                        <div>
                            <FluentIcon Value="@(new Icons.Regular.Size24.LightbulbPerson())" />
                        </div>

                        <div>
                            <ModelMarkdown ModelResponse="@mr"></ModelMarkdown>
                        </div>
                    </FluentStack>

                </FluentCard>
            }
        </div>
    </div>
    <div>
        <h3>Send</h3>
        <textarea @bind="messageInput" class="textarea-fluent-ui    " @onkeydown="HandleKeyPress" @bind:event="oninput"></textarea>
        <FluentButton OnClick="()=>Send(messageInput)">Send</FluentButton>
    </div>
</div>

@code
{

    private HubConnection? hubConnection;
    private List<ModelResponse> modelResponses = new List<ModelResponse>();
    private string? userInput = "edgett";
    private string messageInput = string.Empty;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<Guid, string>("ReceiveModelString", (messageId, message) =>
        {
            var currentModelResponse = modelResponses.Single(mr => mr.PromptId == messageId);

            

            currentModelResponse.AddResponseString(message);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send(string message)
    {
        if (string.IsNullOrWhiteSpace(message))
        {
            return;
        }

        if (hubConnection is not null)
        {
            var newMessage = new ModelResponse() { Prompt = message };
            modelResponses.Add(newMessage);

            var chatConversation = GetChatConversation(modelResponses);


            await hubConnection.SendAsync("SendPrompt", newMessage.PromptId, chatConversation);
        }
    }

    public ChatConversation GetChatConversation(List<ModelResponse> modelResponses)
    {
        var chatConversation = new ChatConversation();
        foreach (var mr in modelResponses)
        {
            var userMessage = new ChatMessage();
            userMessage.Message = mr.Prompt;
            userMessage.Role = ChatMessageRole.User;
            chatConversation.ChatMessages.Add(userMessage);

            if (mr.IsComplete)
            {
                var modelMessage = new ChatMessage();
                modelMessage.Message = mr.Resonse;
                modelMessage.Role = ChatMessageRole.Assistant;
                chatConversation.ChatMessages.Add(modelMessage);

            }

        }

        return chatConversation;
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await Send(messageInput);
            await InvokeAsync(StateHasChanged);
        }

    }
}
