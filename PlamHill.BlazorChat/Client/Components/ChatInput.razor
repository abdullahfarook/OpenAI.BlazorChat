@using PlamHill.BlazorChat.Shared.Models
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<FluentFooter Class="w-100" Style="position:fixed; bottom:0px;">
    <FluentStack Class="chat-messages">
        <div>
            <FluentButton OnClick="ShowSettings" IconStart="(new Icons.Regular.Size24.SettingsChat())" Style="margin-top:6px;"></FluentButton>
        </div>
        <div style="flex-grow:1;">
            <textarea placeholder="Enter a prompt. Use Shift+Enter for a new line." rows="1" @ref="textAreaElement" @bind="messageInput" class="textarea-fluent-ui main-textarea" @onkeyup="HandleKeyPress" @bind:event="oninput"></textarea>
        </div>
        <div>
            <FluentButton @ref="sendButton" OnClick="Send" Appearance="Appearance.Accent" IconStart="(new Icons.Regular.Size24.Send())" Style="margin-top:6px;">Send</FluentButton>
        </div>
    </FluentStack>
</FluentFooter>

@code {
    private ElementReference textAreaElement;
    private string messageInput = string.Empty;
    private FluentButton? sendButton;
    private Chat? _chatRenderer;
    public Chat? ChatRenderer { get { return _chatRenderer; } }
    public UISettings InferenceSettings { get; set; } = new UISettings();

    public void AttachToChat(Chat chat)
    {
        _chatRenderer = chat;
    }

    private async Task ShowSettings()
    {

        DialogParameters<UISettings> parameters = new()
            {

                Title = $"Settings",
                PrimaryAction = "Save",
                PrimaryActionEnabled = true,
                SecondaryAction = "Cancel",
                Width = "500px",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true,
            };
        var currentSettingsCopy = new UISettings { FrequencyPenalty = InferenceSettings.FrequencyPenalty, MaxLength = InferenceSettings.MaxLength, PresencePenalty = InferenceSettings.PresencePenalty, Temperature = InferenceSettings.Temperature, TopP = InferenceSettings.TopP, SystemMessage = InferenceSettings.SystemMessage };
        var dialog = await DialogService.ShowDialogAsync<ChatSettings>(currentSettingsCopy, parameters);
        var dialogResult = await dialog.Result;

        if (dialogResult?.Data != null)
        {
            InferenceSettings = (UISettings)dialogResult.Data;
        }

    }

    private async Task Send()
    {
        if (ChatRenderer == null)
        {
            return;
        }

        await ChatRenderer.Send(messageInput, InferenceSettings);
        messageInput = string.Empty;
        StateHasChanged();
        await SizeTextArea();

    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (ChatRenderer == null)
        {
            return;
        }

        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await Send();
        }

        await SizeTextArea();
    }

    private async Task SizeTextArea()
    {
        await JSRuntime.InvokeVoidAsync("textAreaAdjust", textAreaElement);
    }
}
